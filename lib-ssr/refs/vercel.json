{
  "code": "import { createElementSSR as createElement, toHtmlString } from '@jacksonotto/lampjs-ssr';\nimport { readdirSync, existsSync, readFileSync } from 'fs';\nimport { resolve } from 'path';\nimport mime from 'mime-types';\n\nconst outDir = 'dist-ssr';\n\nconst getStyleTags = (path) => {\n  let res = '';\n  const files = readdirSync(path);\n\n  files.forEach((file) => {\n    if (!file.endsWith('.css')) return;\n\n    res += `<link rel=\"stylesheet\" href=\"/assets/${file}\">`;\n  });\n\n  return res;\n};\n\nexport default async function handler(request, response) {\n  const url = request.url;\n\n  const cwd = process.cwd();\n  const appPath = resolve(cwd, outDir, 'main.js');\n  const App = (await import(appPath)).default;\n\n  const reg = new RegExp(/\\..*$/);\n\n  if (reg.test(url)) {\n    const ext = url.split('.').at(-1);\n    const fileUrl = resolve(cwd, 'dist', url.slice(1));\n    const exists = existsSync(fileUrl);\n\n    if (exists) {\n      const data = readFileSync(fileUrl);\n      const type = mime.lookup(ext);\n      response.setHeader('Content-Type', type);\n      response.status(200).end(data);\n    } else {\n      response.status(404).end('404 page not found');\n    }\n\n    return;\n  }\n\n  const clientJs = '<script type=\"module\" src=\"/main.js\"></script>';\n\n  const styleTags = getStyleTags(resolve(cwd, 'dist', 'assets'));\n\n  const options = {\n    headInject: clientJs + styleTags,\n    route: url\n  };\n\n  const promiseCache = {};\n\n  let html = '<!DOCTYPE html>' + (await toHtmlString(createElement(App, null), options, promiseCache));\n\n  html = html.replace(\n    '<!-- lampjs_cache_insert -->',\n    `<script id=\"_LAMPJS_DATA_\" type=\"application/json\">${JSON.stringify(promiseCache)}</script>`\n  );\n\n  response.status(200).end(html);\n}\n",
  "path": "api/index.js"
}
